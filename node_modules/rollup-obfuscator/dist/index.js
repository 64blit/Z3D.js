"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  obfuscator: () => obfuscator
});
module.exports = __toCommonJS(src_exports);
var import_pluginutils = require("@rollup/pluginutils");
var import_javascript_obfuscator = __toESM(require("javascript-obfuscator"));
function obfuscator(options = { global: true }) {
  const filter = (0, import_pluginutils.createFilter)(
    options.include || ["**/*.js", "**/*.ts"],
    options.exclude || ["node_modules/**"]
  );
  if (options.global != true && options.global != false) {
    options.global = true;
  }
  return {
    name: "obfuscator",
    transform: options.global ? void 0 : (code, id) => {
      if (!filter(id))
        return null;
      const obfuscated = import_javascript_obfuscator.default.obfuscate(code, {
        ...options,
        inputFileName: id
      });
      return {
        code: obfuscated.getObfuscatedCode(),
        map: options.sourceMap ? obfuscated.getSourceMap() : void 0
      };
    },
    renderChunk: options.global ? (code, { fileName }) => {
      const obfuscated = import_javascript_obfuscator.default.obfuscate(code, {
        ...options,
        inputFileName: fileName
      });
      return {
        code: obfuscated.getObfuscatedCode(),
        map: options.sourceMap ? obfuscated.getSourceMap() : void 0
      };
    } : void 0
  };
}
__name(obfuscator, "obfuscator");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  obfuscator
});
